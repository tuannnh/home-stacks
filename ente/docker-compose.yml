services:
  museum:
    image: ghcr.io/ente-io/server
    ports:
      - 11126:8080 # API
      - 2112:2112 # Prometheus metrics
    depends_on:
      postgres:
        condition: service_healthy
      # environment:
      # Pass-in the config to connect to the DB and MinIO
      # ENTE_CREDENTIALS_FILE: /DATA/AppData/ente/credentials.yaml
    volumes:
      - /DATA/AppData/ente/custom-logs:/var/logs
      - /DATA/AppData/ente/museum.yaml:/museum.yaml:ro
      - /DATA/AppData/ente/scripts/compose/credentials.yaml:/credentials.yaml:ro
      - /DATA/AppData/ente/data:/data:ro
    networks:
      - ente
  # Resolve "localhost:3200" in the museum container to the minio container.
  socat:
    image: alpine/socat
    network_mode: service:museum
    depends_on:
      - museum
    command: TCP-LISTEN:3200,fork,reuseaddr TCP:minio:3200
  postgres:
    image: postgres:12
    ports:
      - 11127:5432
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpass
      POSTGRES_DB: ente_db
    # Wait for postgres to be accept connections before starting museum.
    healthcheck:
      test:
        - CMD
        - pg_isready
        - -q
        - -d
        - ente_db
        - -U
        - pguser
      start_period: 40s
      start_interval: 1s
    volumes:
      - /DATA/AppData/ente/postgres-data:/var/lib/postgresql/data
    networks:
      - ente
  minio:
    image: minio/minio
    # Use different ports than the minio defaults to avoid conflicting
    # with the ports used by Prometheus.
    ports:
      - 3200:3200 # API
      - 3201:3201 # Console
    environment:
      MINIO_ROOT_USER: test
      MINIO_ROOT_PASSWORD: testtest
    command: server /data --address ":3200" --console-address ":3201"
    volumes:
      - /server_data/ente/minio-data:/data
    networks:
      - ente
networks:
  default:
    name: ente
    driver: bridge